name: Code Format with Clang-Format

on:
  workflow_dispatch:
    inputs:
      exclude_patterns:
        description: "排除文件/目录 (以逗号间隔)\nFiles/Directories to exclude (comma-separated)"
        required: false
        default: ''
      branch:
        description: "要格式化的分支 | Branch to format"
        required: true
        default: ''

permissions:
  contents: write
  pull-requests: read

jobs:
  format-code:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          lfs: false

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check clang-format version
        run: clang-format --version

      - name: Get all changed files in PR
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          base_sha: origin/main
          sha: ${{ github.event.inputs.branch }}
          separator: ","

      - name: Find source files to format
        id: find-files
        run: |
          #!/usr/bin/env bash
          shopt -s globstar nullglob

          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "=== PR中修改的文件 ==="
          printf '%s\n' "$CHANGED_FILES" | tr ',' '\n'

          if [ -z "$CHANGED_FILES" ]; then
            echo "❌ PR中没有修改的文件"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          mapfile -t CHANGED_ARR < <(printf '%s\n' "$CHANGED_FILES" | tr ',' '\n')

          # --- 只保留源文件扩展名 ---
          declare -a CAND_FILES=()
          for f in "${CHANGED_ARR[@]}"; do
            f="$(echo "$f" | xargs)"
            if [[ "$f" =~ \.(c|cpp|cc|h|hpp|hh|cxx|hxx|inc|inl|ipp|tpp|txx|C|H)$ ]]; then
              CAND_FILES+=("$f")
            fi
          done

          if [ "${#CAND_FILES[@]}" -eq 0 ]; then
            echo "❌ 没有需要格式化的源文件"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          # --- 收集排除模式 ---
          declare -a PATTERNS=()

          # 1️⃣ workflow input exclude_patterns
          INPUT_EXCLUDES="${{ github.event.inputs.exclude_patterns }}"
          if [ -n "$INPUT_EXCLUDES" ]; then
            IFS=',' read -ra TMP <<< "$INPUT_EXCLUDES"
            for p in "${TMP[@]}"; do
              p="$(echo "$p" | xargs)"
              [ -n "$p" ] && PATTERNS+=("$p")
            done
            echo "使用用户传入的 exclude_patterns"
          fi

          # 2️⃣ 仓库 .ignore_format.yml
          if [ -f ".ignore_format.yml" ]; then
            while IFS= read -r raw; do
              line="$(echo "$raw" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
              [ -z "$line" ] && continue
              case "$line" in
                \#*) continue ;;
              esac
              PATTERNS+=("$line")
            done < .ignore_format.yml
            echo "使用仓库 .ignore_format.yml 中的规则"
          fi

          echo "=== 排除模式 ==="
          if [ "${#PATTERNS[@]}" -eq 0 ]; then
            echo "无"
          else
            for p in "${PATTERNS[@]}"; do
              echo "$p"
            done
          fi

          # --- 应用排除规则 ---
          declare -a FILTERED=()
          for f in "${CAND_FILES[@]}"; do
            skip=false
            for p in "${PATTERNS[@]}"; do
              pp="$p"
              # 目录结尾自动扩展
              if [[ "$pp" == */ ]]; then
                pp="${pp%/}/**"
              else
                # 如果没有通配符，且对应路径是目录，也扩展
                if [[ "$pp" != *'*'* && "$pp" != *'?'* ]]; then
                  if [ -d "$pp" ]; then
                    pp="${pp%/}/**"
                  fi
                fi
              fi
              if [[ "$f" == $pp ]]; then
                echo "❌ 文件 $f 被排除 (匹配: $p)"
                skip=true
                break
              fi
            done
            [ "$skip" = false ] && FILTERED+=("$f")
          done

          if [ "${#FILTERED[@]}" -eq 0 ]; then
            echo "❌ 没有需要格式化的文件（可能都被排除了）"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "=== 最终需要格式化的文件 ==="
          for ff in "${FILTERED[@]}"; do
            echo "$ff"
          done

          FILE_COUNT=${#FILTERED[@]}
          echo "找到 $FILE_COUNT 个需要格式化的文件"
          echo "files_count=$FILE_COUNT" >> $GITHUB_OUTPUT

          echo "files_list<<EOF" >> $GITHUB_OUTPUT
          for ff in "${FILTERED[@]}"; do
            echo "$ff" >> $GITHUB_OUTPUT
          done
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Format code with clang-format
        if: steps.find-files.outputs.files_count != '0'
        run: |
          FILES="${{ steps.find-files.outputs.files_list }}"
          mapfile -t TO_FORMAT <<< "$FILES"

          echo "开始格式化 ${#TO_FORMAT[@]} 个文件..."
          for f in "${TO_FORMAT[@]}"; do
            f="$(echo "$f" | xargs)"
            [ -z "$f" ] && continue
            [ ! -f "$f" ] && { echo "⚠️  文件不存在: $f"; continue; }
            echo "📝 格式化: $f"
            if clang-format -style=file -i "$f"; then
              echo "✅ 成功: $f"
            else
              echo "⚠️  clang-format 失败（已跳过）: $f"
            fi
          done
          echo "完成格式化步骤（失败不会中断 Job）"

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "✅ 代码无需格式化"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📋 检测到格式化更改:"
            git diff --name-only
            echo "has_changes=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          git add -A
          git commit -m "style: format code with clang-format [skip ci]" || true
          git push origin HEAD:${{ github.event.inputs.branch }} || true

      - name: Summary
        run: |
          echo "=== 格式化总结 ==="
          echo "分支: ${{ github.event.inputs.branch }}"
          echo "用户 exclude_patterns: ${{ github.event.inputs.exclude_patterns || '无' }}"
          echo "仓库 .ignore_format.yml: $( [ -f .ignore_format.yml ] && echo '存在' || echo '不存在' )"
          echo "处理文件数: ${{ steps.find-files.outputs.files_count }}"
          echo "有更改: ${{ steps.check-changes.outputs.has_changes }}"
          echo "clang-format 版本: $(clang-format --version | head -1)"
