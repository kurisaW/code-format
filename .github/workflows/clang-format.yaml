name: Code Format with Clang-Format

on:
  workflow_dispatch:
    inputs:
      exclude_patterns:
        description: "排除文件/目录 (以逗号间隔)\n Files/Directories to exclude(comma-separated)"
        required: false
        default: ''
      branch:
        description: "要格式化的分支 | Branch to format"
        required: true
        default: ''

permissions:
  contents: write
  pull-requests: read

jobs:
  format-code:
    if: |
      github.repository_owner != 'kurisaW'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          lfs: false

      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format

      - name: Check clang-format version
        run: clang-format --version

      - name: Get changed files from PR
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          since_last_remote_commit: true
          separator: ","

      - name: Find source files to format
        id: find-files
        run: |
          # 获取 PR 修改文件
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          echo "=== PR中修改的文件 ==="
          echo "$CHANGED_FILES" | tr ',' '\n'
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "❌ PR中没有修改的文件"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 筛选源码文件
          FILES=""
          IFS=',' read -ra FILE_ARRAY <<< "$CHANGED_FILES"
          for file in "${FILE_ARRAY[@]}"; do
            if [[ "$file" =~ \.(c|cpp|cc|h|hpp|hh|cxx|hxx|inc|inl|ipp|tpp|txx|C|H)$ ]]; then
              FILES="$FILES$file"$'\n'
            fi
          done
          
          if [ -z "$FILES" ]; then
            echo "❌ 没有需要格式化的源文件"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 收集排除规则（用户输入 + .ignore_format.yml）
          EXCLUDE_PATTERNS=""
          if [ -n "${{ github.event.inputs.exclude_patterns }}" ]; then
            IFS=',' read -ra INPUT_PATTERNS <<< "${{ github.event.inputs.exclude_patterns }}"
            for p in "${INPUT_PATTERNS[@]}"; do
              p=$(echo "$p" | xargs)
              [ -n "$p" ] && EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS"$'\n'"$p"
            done
          fi
          if [ -f ".ignore_format.yml" ]; then
            FILE_PATTERNS=$(grep -v '^#' .ignore_format.yml | grep -v '^[[:space:]]*$' || true)
            [ -n "$FILE_PATTERNS" ] && EXCLUDE_PATTERNS="$EXCLUDE_PATTERNS"$'\n'"$FILE_PATTERNS"
          fi
          
          echo "=== 排除模式 ==="
          echo "$EXCLUDE_PATTERNS"
          
          # 应用排除规则
          FILTERED_FILES=""
          IFS=$'\n' read -d '' -ra FILES_ARRAY <<< "$FILES"
          for file in "${FILES_ARRAY[@]}"; do
            skip=false
            for pattern in $EXCLUDE_PATTERNS; do
              if [[ "$file" == $pattern ]]; then
                echo "❌ 文件 $file 被忽略 (匹配 $pattern)"
                skip=true
                break
              fi
            done
            if [ "$skip" = false ]; then
              FILTERED_FILES="$FILTERED_FILES$file"$'\n'
            fi
          done
          
          if [ -z "$FILTERED_FILES" ]; then
            echo "❌ 没有需要格式化的文件（可能都被排除了）"
            echo "files_count=0" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "=== 最终需要格式化的文件 ==="
          echo "$FILTERED_FILES"
          
          FILE_COUNT=$(echo "$FILTERED_FILES" | wc -l)
          echo "找到 $FILE_COUNT 个需要格式化的文件"
          echo "files_count=$FILE_COUNT" >> $GITHUB_OUTPUT
          
          echo "files_list<<EOF" >> $GITHUB_OUTPUT
          echo "$FILTERED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Format code with clang-format
        if: steps.find-files.outputs.files_count != '0'
        run: |
          echo "开始格式化代码..."
          FILES="${{ steps.find-files.outputs.files_list }}"
          
          while IFS= read -r file; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              echo "📝 格式化: $file"
              if clang-format -style=file -i "$file"; then
                echo "✅ 成功: $file"
              else
                echo "⚠️  失败: $file (跳过)"
              fi
            fi
          done <<< "$FILES"
          
          echo "✅ 代码格式化完成"

      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "✅ 代码无需格式化"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "📋 检测到格式化更改:"
            git diff --name-only
            echo "has_changes=true" >> $GITHUB_OUTPUT

      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add -A
          git commit -m "style: format code with clang-format [skip ci]"
          git push origin HEAD:${{ github.event.inputs.branch }}
          
          echo "✅ 代码格式化完成并已推送到分支 ${{ github.event.inputs.branch }}"

      - name: Summary
        run: |
          echo "=== 格式化总结 ==="
          echo "分支: ${{ github.event.inputs.branch }}"
          echo "用户排除模式: ${{ github.event.inputs.exclude_patterns || '无' }}"
          echo "处理文件数: ${{ steps.find-files.outputs.files_count }}"
          echo "有更改: ${{ steps.check-changes.outputs.has_changes }}"
          echo "clang-format 版本: $(clang-format --version | head -1)"
