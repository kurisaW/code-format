name: Code Format with Astyle

on:
  workflow_dispatch:
    inputs:
      exclude_patterns:
        description: '要排除的文件/目录（逗号分隔）'
        required: false
        default: ''
      branch:
        description: '要格式化的分支'
        required: true
        default: 'main'

jobs:
  format-code:
  if: |
    github.repository != 'kurisaW/code-format'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up Astyle
        run: |
          sudo apt-get update
          sudo apt-get install -y astyle

      - name: Create exclude patterns
        run: |
          EXCLUDE_PATTERNS="${{ github.event.inputs.exclude_patterns }}"
          EXCLUDE_ARGS=""
          
          if [ -n "$EXCLUDE_PATTERNS" ]; then
            IFS=',' read -ra PATTERNS <<< "$EXCLUDE_PATTERNS"
            for pattern in "${PATTERNS[@]}"; do
              EXCLUDE_ARGS="$EXCLUDE_ARGS --exclude=\"$pattern\""
            done
          fi
          
          echo "EXCLUDE_ARGS=$EXCLUDE_ARGS" >> $GITHUB_ENV

      - name: Format code with Astyle
        run: |
          # 查找所有需要格式化的文件
          FIND_CMD="find . -name '*.cpp' -o -name '*.h' -o -name '*.c' -o -name '*.hpp' -o -name '*.cc'"
          
          if [ -n "$EXCLUDE_ARGS" ]; then
            # 构建排除模式
            IFS=',' read -ra PATTERNS <<< "${{ github.event.inputs.exclude_patterns }}"
            for pattern in "${PATTERNS[@]}"; do
              FIND_CMD="$FIND_CMD -not -path \"*/$pattern/*\" -not -name \"$pattern\""
            done
          fi
          
          echo "Running: $FIND_CMD"
          FILES=$(eval $FIND_CMD)
          
          if [ -z "$FILES" ]; then
            echo "No files found to format"
            exit 0
          fi
          
          echo "Files to format:"
          echo "$FILES"
          
          # 使用astylerc配置文件进行格式化
          for file in $FILES; do
            if [ -f "$file" ]; then
              echo "Formatting $file"
              astyle --options=.astylerc "$file"
            fi
          done

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes detected"
            git diff --name-only
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add .
          git commit -m "style: format code with astyle"
          git push origin ${{ github.event.inputs.branch }}
          
          echo "✅ 代码格式化完成并已推送到分支 ${{ github.event.inputs.branch }}"

      - name: No changes needed
        if: steps.changes.outputs.has_changes == 'false'
        run: |
          echo "✅ 代码无需格式化"