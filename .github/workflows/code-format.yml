name: Code Formatting with Astyle

on:
  workflow_dispatch:
    inputs:
      exclude-paths:
        description: 'Comma-separated paths to exclude from formatting (e.g., "src/legacy,test/**")'
        required: false
        default: ''
  pull_request:
    branches: [ main, master ]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  format-code:
    name: Format Code with Astyle
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    steps:
      # 步骤 1: 检出代码 - 修复 ref 配置
      - name: Manual Checkout PR head branch
        if: github.event_name == 'pull_request'
        run: |
          # 初始化仓库
          git init
          # 添加 remote with token for auth (supports fork fetch)
          git remote add origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          
          # Fetch base
          git fetch origin main || git fetch origin master  # 支持 main/master
          git checkout -b main origin/main || git checkout -b master origin/master
          
          # 获取正确分支名
          ORIGINAL_REF="${{ github.event.pull_request.head.ref }}"
          USER_LOGIN="${{ github.event.pull_request.head.user.login }}"
          echo "Debug: ORIGINAL_REF = $ORIGINAL_REF"
          echo "Debug: USER_LOGIN = $USER_LOGIN"
          echo "Debug: Is fork? ${{ github.event.pull_request.head.repo.full_name != github.repository }}"
          
          if [[ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]]; then
            # Fork: 检查 ORIGINAL_REF 是否已带用户名（避免重复）
            if [[ "$ORIGINAL_REF" == "$USER_LOGIN-"* ]]; then
              FORK_BRANCH="$ORIGINAL_REF"  # 已带前缀，直接用
              echo "Debug: Using existing prefixed ref: $FORK_BRANCH"
            else
              FORK_BRANCH="${USER_LOGIN}-${ORIGINAL_REF}"
              echo "Debug: Building prefixed ref: $FORK_BRANCH"
            fi
            # Fetch fork branch (with error handling)
            git fetch origin "$FORK_BRANCH" || {
              echo "Warning: Failed to fetch fork branch $FORK_BRANCH. Falling back to head SHA."
              git fetch origin "${{ github.event.pull_request.head.sha }}"  # 用 SHA 作为 fallback
              git checkout -b "$FORK_BRANCH" "${{ github.event.pull_request.head.sha }}"
            }
            git checkout "$FORK_BRANCH"
          else
            # Internal PR: 直接用 ORIGINAL_REF
            git fetch origin "$ORIGINAL_REF"
            git checkout "$ORIGINAL_REF"
          fi
          
          # 配置 Git 用户
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 2: 安装 Astyle 和 jq
      - name: Setup Astyle and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y astyle jq

      # 步骤 3: 确定需要格式化的文件列表 - 修复 inputs 问题
      - name: Find files to format (excluding specified paths)
        id: find-files
        run: |
          # 根据事件类型获取排除路径
          EXCLUDE_PATHS_STR=""
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            EXCLUDE_PATHS_STR="${{ github.event.inputs.exclude-paths }}"
          else
            # 对于 PR 事件，可以使用默认值或从其他地方获取
            EXCLUDE_PATHS_STR=""
          fi

          echo "Exclude paths: $EXCLUDE_PATHS_STR"
          
          # 构建 find 命令的排除参数
          EXCLUDE_CLAUSES=""
          if [[ -n "$EXCLUDE_PATHS_STR" ]]; then
            IFS=',' read -ra EXCLUDE_PATHS <<< "$EXCLUDE_PATHS_STR"
            for path in "${EXCLUDE_PATHS[@]}"; do
              cleaned_path=$(echo "$path" | xargs)
              if [[ -n "$cleaned_path" ]]; then
                EXCLUDE_CLAUSES="$EXCLUDE_CLAUSES -not -path \"./$cleaned_path\""
              fi
            done
          fi

          echo "Exclude clauses: $EXCLUDE_CLAUSES"
          
          # 查找需要格式化的文件
          FILE_LIST=$(find . -name "*.c" -o -name "*.cpp" -o -name "*.h" -o -name "*.hpp" $EXCLUDE_CLAUSES | grep -vE "(/\.git/|/build/|/node_modules/)" || true)
          
          if [[ -z "$FILE_LIST" ]]; then
            echo "No files found to format."
            echo "files=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # 转换为 JSON 数组
          JSON_LIST=$(echo "$FILE_LIST" | jq -R -s -c 'split("\n") | map(select(. != "" and . != "."))')
          echo "files=$JSON_LIST" >> $GITHUB_OUTPUT
          echo "Found $(echo "$FILE_LIST" | wc -l) files to format"

      # 步骤 4: 运行 Astyle 格式化
      - name: Run Astyle formatting
        run: |
          files_json='${{ steps.find-files.outputs.files }}'
          if [[ "$files_json" == "[]" ]]; then
            echo "No files to format."
            exit 0
          fi
          
          # 转换为文件数组
          files_array=$(echo '${{ steps.find-files.outputs.files }}' | jq -r '.[]')
          echo "Files to format:"
          echo "$files_array"
          
          if [[ -z "$files_array" ]]; then
            echo "No files to format."
            exit 0
          fi

          # 使用 .astylerc 配置文件格式化每个文件
          for file in $files_array; do
            if [[ -f "$file" ]]; then
              echo "Formatting: $file"
              astyle --options=".astylerc" "$file" || true
            fi
          done

      # 步骤 5: 检查是否有文件被更改，并提交
      - name: Check for changes and commit
        id: check-and-commit
        run: |
          # 检查是否有更改
          if [[ -z $(git status --porcelain) ]]; then
            echo "No changes to commit."
            echo "changes_detected=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Changes detected:"
          git diff --name-only
          git diff

          # 配置 Git 用户
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # 获取当前分支名
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          if [[ "$BRANCH_NAME" == "$GITHUB_REF" ]]; then
            # 如果是 PR，使用 head ref
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          fi

          echo "On branch: $BRANCH_NAME"

          # 创建提交
          git add -A
          git commit -m "style: apply automatic code formatting with astyle [skip ci]"

          # 推送更改
          git push origin HEAD:$BRANCH_NAME

          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "✅ Changes committed and pushed"

      # 步骤 6: 在 PR 上添加评论通知
      - name: Comment on PR
        if: steps.check-and-commit.outputs.changes_detected == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🤖 Automated code formatting has been applied to this PR. The changes have been committed to the branch.\n\nPlease review the formatting changes.'
            })
